import shutil
import subprocess
import webbrowser as web
import datetime
import pyttsx3
import pywhatkit
import wikipedia
import pyjokes
import requests
import sys
import os
import speech_recognition as sr
import pyautogui
import time

# Initialize text-to-speech engine
engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)  # Use female voice

# Initialize speech recognizer
listener = sr.Recognizer()

def talk(text):
    """Speak out the given text."""
    engine.say(text)
    engine.runAndWait()

def wish_me():
    """Welcome the user based on the time of day."""
    hour = int(datetime.datetime.now().hour)
    if 0 <= hour < 12:
        talk("Good Morning Sir!")
    elif 12 <= hour < 18:
        talk("Good Afternoon Sir!")
    else:
        talk("Good Evening Sir!")
    talk("I am your Assistant, Alexa.")

def username():
    """Ask for and greet the user by their name."""
    talk("What should I call you, Sir?")
    uname = take_command_with_fallback("your name")
    talk(f"Welcome Mister {uname}")
    print(f"#####################\nWelcome Mr. {uname}\n#####################")
    talk("How can I help you, Sir?")

def take_command():
    """Listen for a voice command."""
    try:
        with sr.Microphone() as source:
            print('Listening...')
            listener.adjust_for_ambient_noise(source)
            voice = listener.listen(source, timeout=5, phrase_time_limit=10)
            command = listener.recognize_google(voice).lower()
            print(f"User said: {command}")
            if 'alexa' in command:
                return command.replace('alexa', '').strip()
            return command  # Accept command even without 'alexa'
    except sr.UnknownValueError:
        talk("Sorry, I didn't catch that.")
    except sr.RequestError:
        talk("Sorry, there's a problem with the speech recognition service.")
    except sr.WaitTimeoutError:
        talk("No speech detected.")
    return ""

def take_command_with_fallback(prompt="your command"):
    """Listen for a command, ask twice if not understood, and fallback to text input."""
    for attempt in range(2):
        talk(f"Please say {prompt}.")
        command = take_command()
        if command:
            return command.lower()
        talk("Could you please repeat that?")
    talk(f"I couldn't understand you after two tries. Please type {prompt} instead.")
    command = input(f"Please type {prompt}: ")
    return command.lower()

def is_connected():
    """Check for internet connectivity."""
    try:
        requests.get("https://www.google.com", timeout=5)
        return True
    except requests.ConnectionError:
        return False

def log_command(command):
    """Log recognized commands to a file with timestamp."""
    with open("command_log.txt", "a") as log_file:
        log_file.write(f"{datetime.datetime.now()} - {command}\n")

def open_notepad_and_type():
    """Open Notepad and type what the user says."""
    subprocess.Popen(["notepad.exe"])
    time.sleep(2)
    talk("Notepad is open. Start speaking, and I will type for you. Say 'stop typing' to stop.")
    while True:
        command = take_command()
        if "stop typing" in command:
            talk("Okay, I have stopped typing.")
            break
        elif command:
            print(f"Typing: {command}")
            pyautogui.typewrite(command + '\n', interval=0.05)

def close_application(app_name):
    """Close an application by its process name, with confirmation."""
    try:
        app_name = app_name.lower().strip()
        if not app_name.endswith(".exe"):
            app_name += ".exe"
        talk(f"Are you sure you want to close {app_name.replace('.exe', '')}?")
        confirmation = take_command_with_fallback("yes or no")
        if "yes" in confirmation:
            subprocess.run(f"taskkill /f /im {app_name}", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            talk(f"{app_name.replace('.exe','').capitalize()} has been closed.")
        else:
            talk("Okay, I won't close it.")
    except Exception as e:
        talk(f"Unable to close {app_name}. Error: {str(e)}")

def run_alexa():
    """Main function to process commands."""
    if not is_connected():
        talk("It seems you're not connected to the internet. Please check your connection and try again.")
        return

    command = take_command_with_fallback("your command")
    if not command:
        return

    log_command(command)
    command = command.lower()

    try:
        if 'open notepad' in command:
            open_notepad_and_type()

        elif 'close' in command:
            app_name = command.replace("close", "").strip()
            if app_name:
                close_application(app_name)
            else:
                talk("Please specify the application you want to close.")

        elif 'search' in command:
            search_query = command.replace("search", "").strip()
            if search_query:
                talk(f"Searching for {search_query}")
                web.open(f"https://www.google.com/search?q={search_query.replace(' ', '+')}")
            else:
                talk("I couldn't understand what you want to search. Please try again.")

        elif 'play' in command:
            song = command.replace('play', '').strip()
            if song:
                talk(f'Playing {song}')
                pywhatkit.playonyt(song)
            else:
                talk("I couldn't understand the song name. Please try again.")

        elif 'time' in command:
            current_time = datetime.datetime.now().strftime('%I:%M %p')
            talk(f"The current time is {current_time}")

        elif 'who is' in command:
            person = command.replace('who is', '').strip()
            if person:
                try:
                    info = wikipedia.summary(person, 1)
                    talk(info)
                except wikipedia.exceptions.DisambiguationError:
                    talk("There are multiple people with that name. Could you be more specific?")
                except wikipedia.exceptions.PageError:
                    talk("Sorry, I couldn't find any information on that person.")
            else:
                talk("Please specify who you want information about.")

        elif 'switch application' in command:
            talk("Switching applications.")
            pyautogui.hotkey('alt', 'tab')

        elif 'joke' in command:
            talk(pyjokes.get_joke())

        elif any(word in command for word in ['stop', 'exit', 'quit', 'bye']):
            talk("Goodbye, Sir.")
            sys.exit()

        else:
            talk("Sorry, I didn't understand that command. Please try again.")

    except Exception as e:
        talk(f"An error occurred: {str(e)}")
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    wish_me()
    username()
    while True:
        run_alexa()
